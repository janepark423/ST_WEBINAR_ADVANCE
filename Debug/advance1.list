
advance1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  080033b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080033b4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aef  00000000  00000000  0002b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8d4  00000000  00000000  0002ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6e6  00000000  00000000  0004b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bba2e  00000000  00000000  00057bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001135e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003430  00000000  00000000  00113638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003378 	.word	0x08003378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003378 	.word	0x08003378

08000218 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){__NOP();}
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000228:	d100      	bne.n	800022c <HAL_GPIO_EXTI_Callback+0x14>
 800022a:	bf00      	nop
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d105      	bne.n	8000254 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		HAL_TIM_PWM_Start_DMA(htim, TIM_CHANNEL_1, (uint32_t *)light, 200);
 8000248:	23c8      	movs	r3, #200	; 0xc8
 800024a:	4a05      	ldr	r2, [pc, #20]	; (8000260 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800024c:	2100      	movs	r1, #0
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f001 fe90 	bl	8001f74 <HAL_TIM_PWM_Start_DMA>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200001b8 	.word	0x200001b8
 8000260:	20000028 	.word	0x20000028

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fa8e 	bl	800078a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f829 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f917 	bl	80004a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000276:	f000 f8eb 	bl	8000450 <MX_DMA_Init>
  MX_TIM2_Init();
 800027a:	f000 f871 	bl	8000360 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  for (int ix =0; ix <200; ++ix)
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e011      	b.n	80002a8 <main+0x44>
	  light[ix] = abs(ix - 100) * step;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3b64      	subs	r3, #100	; 0x64
 8000288:	2b00      	cmp	r3, #0
 800028a:	bfb8      	it	lt
 800028c:	425b      	neglt	r3, r3
 800028e:	b29b      	uxth	r3, r3
 8000290:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000294:	fb13 f302 	smulbb	r3, r3, r2
 8000298:	b299      	uxth	r1, r3
 800029a:	4a08      	ldr	r2, [pc, #32]	; (80002bc <main+0x58>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int ix =0; ix <200; ++ix)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3301      	adds	r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2bc7      	cmp	r3, #199	; 0xc7
 80002ac:	ddea      	ble.n	8000284 <main+0x20>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)light, 200);
 80002ae:	23c8      	movs	r3, #200	; 0xc8
 80002b0:	4a02      	ldr	r2, [pc, #8]	; (80002bc <main+0x58>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <main+0x5c>)
 80002b6:	f001 fe5d 	bl	8001f74 <HAL_TIM_PWM_Start_DMA>
//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <main+0x56>
 80002bc:	20000028 	.word	0x20000028
 80002c0:	200001b8 	.word	0x200001b8

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b094      	sub	sp, #80	; 0x50
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2238      	movs	r2, #56	; 0x38
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 f848 	bl	8003368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 ffdc 	bl	80012a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	2302      	movs	r3, #2
 80002ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2340      	movs	r3, #64	; 0x40
 80002f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fe:	2302      	movs	r3, #2
 8000300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000302:	2301      	movs	r3, #1
 8000304:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000306:	2314      	movs	r3, #20
 8000308:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030a:	2302      	movs	r3, #2
 800030c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	4618      	mov	r0, r3
 800031c:	f001 f876 	bl	800140c <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000326:	f000 f90f 	bl	8000548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800033c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2104      	movs	r1, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fb78 	bl	8001a3c <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000352:	f000 f8f9 	bl	8000548 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	; 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08e      	sub	sp, #56	; 0x38
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	f107 031c 	add.w	r3, r7, #28
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000380:	463b      	mov	r3, r7
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000392:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <MX_TIM2_Init+0xe8>)
 8000394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000398:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <MX_TIM2_Init+0xe8>)
 800039c:	2227      	movs	r2, #39	; 0x27
 800039e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80003a0:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 439999;
 80003a6:	4b28      	ldr	r3, [pc, #160]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003a8:	4a28      	ldr	r2, [pc, #160]	; (800044c <MX_TIM2_Init+0xec>)
 80003aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b8:	4823      	ldr	r0, [pc, #140]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003ba:	f001 fd23 	bl	8001e04 <HAL_TIM_Base_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003c4:	f000 f8c0 	bl	8000548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d2:	4619      	mov	r1, r3
 80003d4:	481c      	ldr	r0, [pc, #112]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003d6:	f002 f8f9 	bl	80025cc <HAL_TIM_ConfigClockSource>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003e0:	f000 f8b2 	bl	8000548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003e4:	4818      	ldr	r0, [pc, #96]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003e6:	f001 fd64 	bl	8001eb2 <HAL_TIM_PWM_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003f0:	f000 f8aa 	bl	8000548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fc:	f107 031c 	add.w	r3, r7, #28
 8000400:	4619      	mov	r1, r3
 8000402:	4811      	ldr	r0, [pc, #68]	; (8000448 <MX_TIM2_Init+0xe8>)
 8000404:	f002 ff0a 	bl	800321c <HAL_TIMEx_MasterConfigSynchronization>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800040e:	f000 f89b 	bl	8000548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000412:	2360      	movs	r3, #96	; 0x60
 8000414:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 19999;
 8000416:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800041a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800041c:	2300      	movs	r3, #0
 800041e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000424:	463b      	mov	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	4619      	mov	r1, r3
 800042a:	4807      	ldr	r0, [pc, #28]	; (8000448 <MX_TIM2_Init+0xe8>)
 800042c:	f001 ffba 	bl	80023a4 <HAL_TIM_PWM_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000436:	f000 f887 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800043a:	4803      	ldr	r0, [pc, #12]	; (8000448 <MX_TIM2_Init+0xe8>)
 800043c:	f000 f8fa 	bl	8000634 <HAL_TIM_MspPostInit>

}
 8000440:	bf00      	nop
 8000442:	3738      	adds	r7, #56	; 0x38
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200001b8 	.word	0x200001b8
 800044c:	0006b6bf 	.word	0x0006b6bf

08000450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <MX_DMA_Init+0x50>)
 8000458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800045a:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <MX_DMA_Init+0x50>)
 800045c:	f043 0304 	orr.w	r3, r3, #4
 8000460:	6493      	str	r3, [r2, #72]	; 0x48
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_DMA_Init+0x50>)
 8000464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000466:	f003 0304 	and.w	r3, r3, #4
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_DMA_Init+0x50>)
 8000470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <MX_DMA_Init+0x50>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6493      	str	r3, [r2, #72]	; 0x48
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_DMA_Init+0x50>)
 800047c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2100      	movs	r1, #0
 800048a:	200b      	movs	r0, #11
 800048c:	f000 fac9 	bl	8000a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000490:	200b      	movs	r0, #11
 8000492:	f000 fae0 	bl	8000a56 <HAL_NVIC_EnableIRQ>

}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b21      	ldr	r3, [pc, #132]	; (8000540 <MX_GPIO_Init+0x9c>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a20      	ldr	r2, [pc, #128]	; (8000540 <MX_GPIO_Init+0x9c>)
 80004c0:	f043 0304 	orr.w	r3, r3, #4
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <MX_GPIO_Init+0x9c>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0304 	and.w	r3, r3, #4
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_GPIO_Init+0x9c>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <MX_GPIO_Init+0x9c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <MX_GPIO_Init+0x9c>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4619      	mov	r1, r3
 8000500:	4810      	ldr	r0, [pc, #64]	; (8000544 <MX_GPIO_Init+0xa0>)
 8000502:	f000 fd35 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8000506:	2308      	movs	r3, #8
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050a:	2302      	movs	r3, #2
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000516:	230c      	movs	r3, #12
 8000518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	4619      	mov	r1, r3
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f000 fd24 	bl	8000f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	2028      	movs	r0, #40	; 0x28
 800052e:	f000 fa78 	bl	8000a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000532:	2028      	movs	r0, #40	; 0x28
 8000534:	f000 fa8f 	bl	8000a56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	48000800 	.word	0x48000800

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <Error_Handler+0x8>
	...

08000554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x44>)
 800055c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_MspInit+0x44>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6613      	str	r3, [r2, #96]	; 0x60
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x44>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_MspInit+0x44>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_MspInit+0x44>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	6593      	str	r3, [r2, #88]	; 0x58
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_MspInit+0x44>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800058a:	f000 ff2f 	bl	80013ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005ac:	d137      	bne.n	800061e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <HAL_TIM_Base_MspInit+0x8c>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <HAL_TIM_Base_MspInit+0x8c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_TIM_Base_MspInit+0x8c>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <HAL_TIM_Base_MspInit+0x94>)
 80005ca:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005ce:	2238      	movs	r2, #56	; 0x38
 80005d0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005d4:	2210      	movs	r2, #16
 80005d6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ea:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005f2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 80005fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000600:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 8000604:	f000 fa42 	bl	8000a8c <HAL_DMA_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800060e:	f7ff ff9b 	bl	8000548 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a05      	ldr	r2, [pc, #20]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_TIM_Base_MspInit+0x90>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	20000204 	.word	0x20000204
 8000630:	40020008 	.word	0x40020008

08000634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000654:	d11c      	bne.n	8000690 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_TIM_MspPostInit+0x64>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <HAL_TIM_MspPostInit+0x64>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_TIM_MspPostInit+0x64>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800066e:	2320      	movs	r3, #32
 8000670:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800067e:	2301      	movs	r3, #1
 8000680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f000 fc70 	bl	8000f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 f8a2 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <DMA1_Channel1_IRQHandler+0x10>)
 80006f6:	f000 faec 	bl	8000cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000204 	.word	0x20000204

08000704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800070c:	f000 fdb2 	bl	8001274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <SystemInit+0x20>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <SystemInit+0x20>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490e      	ldr	r1, [pc, #56]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0b      	ldr	r4, [pc, #44]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000762:	f7ff ffd7 	bl	8000714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f002 fddb 	bl	8003320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800076a:	f7ff fd7b 	bl	8000264 <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800077c:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 8000780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000784:	20000268 	.word	0x20000268

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>

0800078a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f939 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f80e 	bl	80007bc <HAL_InitTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	e001      	b.n	80007b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ac:	f7ff fed2 	bl	8000554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b0:	79fb      	ldrb	r3, [r7, #7]

}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_InitTick+0x68>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d022      	beq.n	8000816 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_InitTick+0x6c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <HAL_InitTick+0x68>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80007e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f944 	bl	8000a72 <HAL_SYSTICK_Config>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10f      	bne.n	8000810 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b0f      	cmp	r3, #15
 80007f4:	d809      	bhi.n	800080a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f6:	2200      	movs	r2, #0
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	f04f 30ff 	mov.w	r0, #4294967295
 80007fe:	f000 f910 	bl	8000a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_InitTick+0x70>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	e007      	b.n	800081a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	e004      	b.n	800081a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e001      	b.n	800081a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000008 	.word	0x20000008
 8000828:	20000000 	.word	0x20000000
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x1c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x20>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4413      	add	r3, r2
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x1c>)
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000264 	.word	0x20000264
 8000850:	20000008 	.word	0x20000008

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000264 	.word	0x20000264

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	db0b      	blt.n	80008fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 021f 	and.w	r2, r3, #31
 80008e8:	4907      	ldr	r1, [pc, #28]	; (8000908 <__NVIC_EnableIRQ+0x38>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	2001      	movs	r0, #1
 80008f2:	fa00 f202 	lsl.w	r2, r0, r2
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d8:	d301      	bcc.n	80009de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009da:	2301      	movs	r3, #1
 80009dc:	e00f      	b.n	80009fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <SysTick_Config+0x40>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e6:	210f      	movs	r1, #15
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f7ff ff8e 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SysTick_Config+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SysTick_Config+0x40>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff29 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff40 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff90 	bl	8000960 <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5f 	bl	800090c <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff33 	bl	80008d0 <__NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffa4 	bl	80009c8 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e08d      	b.n	8000bba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <HAL_DMA_Init+0x138>)
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d80f      	bhi.n	8000aca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <HAL_DMA_Init+0x13c>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a45      	ldr	r2, [pc, #276]	; (8000bcc <HAL_DMA_Init+0x140>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	091b      	lsrs	r3, r3, #4
 8000abc:	009a      	lsls	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a42      	ldr	r2, [pc, #264]	; (8000bd0 <HAL_DMA_Init+0x144>)
 8000ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac8:	e00e      	b.n	8000ae8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <HAL_DMA_Init+0x148>)
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <HAL_DMA_Init+0x140>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	009a      	lsls	r2, r3, #2
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <HAL_DMA_Init+0x14c>)
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2202      	movs	r2, #2
 8000aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 f9b6 	bl	8000eac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b48:	d102      	bne.n	8000b50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d010      	beq.n	8000b90 <HAL_DMA_Init+0x104>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d80c      	bhi.n	8000b90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f9d6 	bl	8000f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	e008      	b.n	8000ba2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40020407 	.word	0x40020407
 8000bc8:	bffdfff8 	.word	0xbffdfff8
 8000bcc:	cccccccd 	.word	0xcccccccd
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	bffdfbf8 	.word	0xbffdfbf8
 8000bd8:	40020400 	.word	0x40020400

08000bdc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <HAL_DMA_Start_IT+0x20>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e066      	b.n	8000cca <HAL_DMA_Start_IT+0xee>
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d155      	bne.n	8000cbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2202      	movs	r2, #2
 8000c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0201 	bic.w	r2, r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	68b9      	ldr	r1, [r7, #8]
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f000 f8fb 	bl	8000e30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d008      	beq.n	8000c54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f042 020e 	orr.w	r2, r2, #14
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e00f      	b.n	8000c74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0204 	bic.w	r2, r2, #4
 8000c62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 020a 	orr.w	r2, r2, #10
 8000c72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d007      	beq.n	8000c92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ca8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0201 	orr.w	r2, r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e005      	b.n	8000cc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f003 031f 	and.w	r3, r3, #31
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d026      	beq.n	8000d4c <HAL_DMA_IRQHandler+0x7a>
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d021      	beq.n	8000d4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d107      	bne.n	8000d26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0204 	bic.w	r2, r2, #4
 8000d24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f003 021f 	and.w	r2, r3, #31
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	2104      	movs	r1, #4
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d071      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d4a:	e06c      	b.n	8000e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f003 031f 	and.w	r3, r3, #31
 8000d54:	2202      	movs	r2, #2
 8000d56:	409a      	lsls	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d02e      	beq.n	8000dbe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d029      	beq.n	8000dbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 020a 	bic.w	r2, r2, #10
 8000d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d038      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000dbc:	e033      	b.n	8000e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d02a      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d025      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 020e 	bic.w	r2, r2, #14
 8000dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
}
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f003 021f 	and.w	r2, r3, #31
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	d108      	bne.n	8000e90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e8e:	e007      	b.n	8000ea0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	60da      	str	r2, [r3, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d802      	bhi.n	8000ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e001      	b.n	8000eca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000ec8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3b08      	subs	r3, #8
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	009a      	lsls	r2, r3, #2
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4413      	add	r3, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000ef6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	2201      	movs	r2, #1
 8000f00:	409a      	lsls	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000f06:	bf00      	nop
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40020407 	.word	0x40020407
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020820 	.word	0x40020820
 8000f20:	cccccccd 	.word	0xcccccccd
 8000f24:	40020880 	.word	0x40020880

08000f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	461a      	mov	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000f4a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	2201      	movs	r2, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	1000823f 	.word	0x1000823f
 8000f6c:	40020940 	.word	0x40020940

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f7e:	e15a      	b.n	8001236 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 814c 	beq.w	8001230 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80a6 	beq.w	8001230 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e8:	4a5a      	ldr	r2, [pc, #360]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6613      	str	r3, [r2, #96]	; 0x60
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_GPIO_Init+0x2e4>)
 80010f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fc:	4a56      	ldr	r2, [pc, #344]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001126:	d01f      	beq.n	8001168 <HAL_GPIO_Init+0x1f8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x2ec>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d019      	beq.n	8001164 <HAL_GPIO_Init+0x1f4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x2f0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <HAL_GPIO_Init+0x1f0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x2f4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_GPIO_Init+0x1ec>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_GPIO_Init+0x2f8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x1e8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_GPIO_Init+0x2fc>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_GPIO_Init+0x1e4>
 8001150:	2305      	movs	r3, #5
 8001152:	e00a      	b.n	800116a <HAL_GPIO_Init+0x1fa>
 8001154:	2306      	movs	r3, #6
 8001156:	e008      	b.n	800116a <HAL_GPIO_Init+0x1fa>
 8001158:	2304      	movs	r3, #4
 800115a:	e006      	b.n	800116a <HAL_GPIO_Init+0x1fa>
 800115c:	2303      	movs	r3, #3
 800115e:	e004      	b.n	800116a <HAL_GPIO_Init+0x1fa>
 8001160:	2302      	movs	r3, #2
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x1fa>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_GPIO_Init+0x1fa>
 8001168:	2300      	movs	r3, #0
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117a:	4937      	ldr	r1, [pc, #220]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_GPIO_Init+0x300>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ac:	4a30      	ldr	r2, [pc, #192]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d6:	4a26      	ldr	r2, [pc, #152]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_GPIO_Init+0x300>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_GPIO_Init+0x300>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_GPIO_Init+0x300>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_GPIO_Init+0x300>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f ae9d 	bne.w	8000f80 <HAL_GPIO_Init+0x10>
  }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	48000400 	.word	0x48000400
 8001260:	48000800 	.word	0x48000800
 8001264:	48000c00 	.word	0x48000c00
 8001268:	48001000 	.word	0x48001000
 800126c:	48001400 	.word	0x48001400
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001280:	695a      	ldr	r2, [r3, #20]
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ffc0 	bl	8000218 <HAL_GPIO_EXTI_Callback>
  }
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d141      	bne.n	8001336 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d131      	bne.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012c6:	4a46      	ldr	r2, [pc, #280]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d8:	4a41      	ldr	r2, [pc, #260]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2232      	movs	r2, #50	; 0x32
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	4a3f      	ldr	r2, [pc, #252]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	0c9b      	lsrs	r3, r3, #18
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f6:	e002      	b.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130a:	d102      	bne.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f2      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001312:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131e:	d158      	bne.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e057      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132a:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001334:	e04d      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800133c:	d141      	bne.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134a:	d131      	bne.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2232      	movs	r2, #50	; 0x32
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001382:	e002      	b.n	800138a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3b01      	subs	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001396:	d102      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f2      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013aa:	d112      	bne.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e011      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013c0:	e007      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40007000 	.word	0x40007000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6093      	str	r3, [r2, #8]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40007000 	.word	0x40007000

0800140c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e306      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d075      	beq.n	8001516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142a:	4b97      	ldr	r3, [pc, #604]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001434:	4b94      	ldr	r3, [pc, #592]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d102      	bne.n	800144a <HAL_RCC_OscConfig+0x3e>
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d002      	beq.n	8001450 <HAL_RCC_OscConfig+0x44>
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b08      	cmp	r3, #8
 800144e:	d10b      	bne.n	8001468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	4b8d      	ldr	r3, [pc, #564]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d05b      	beq.n	8001514 <HAL_RCC_OscConfig+0x108>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d157      	bne.n	8001514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e2e1      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x74>
 8001472:	4b85      	ldr	r3, [pc, #532]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a84      	ldr	r2, [pc, #528]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x98>
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a7e      	ldr	r2, [pc, #504]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7b      	ldr	r2, [pc, #492]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xb0>
 80014a4:	4b78      	ldr	r3, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a74      	ldr	r2, [pc, #464]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff f9c6 	bl	8000854 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff f9c2 	bl	8000854 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e2a6      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014de:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xc0>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff f9b2 	bl	8000854 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff f9ae 	bl	8000854 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e292      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0xe8>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d075      	beq.n	800160e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001522:	4b59      	ldr	r3, [pc, #356]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800152c:	4b56      	ldr	r3, [pc, #344]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d102      	bne.n	8001542 <HAL_RCC_OscConfig+0x136>
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d002      	beq.n	8001548 <HAL_RCC_OscConfig+0x13c>
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d11f      	bne.n	8001588 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x154>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e265      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	4946      	ldr	r1, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001574:	4b45      	ldr	r3, [pc, #276]	; (800168c <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f91f 	bl	80007bc <HAL_InitTick>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d043      	beq.n	800160c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e251      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a3c      	ldr	r2, [pc, #240]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff f95a 	bl	8000854 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff f956 	bl	8000854 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e23a      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	061b      	lsls	r3, r3, #24
 80015d0:	492d      	ldr	r1, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
 80015d6:	e01a      	b.n	800160e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 80015de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff f936 	bl	8000854 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff f932 	bl	8000854 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e216      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x1e0>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d041      	beq.n	800169e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01c      	beq.n	800165c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001628:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7ff f90f 	bl	8000854 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff f90b 	bl	8000854 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1ef      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800164e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0ef      	beq.n	800163a <HAL_RCC_OscConfig+0x22e>
 800165a:	e020      	b.n	800169e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <HAL_RCC_OscConfig+0x27c>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff f8f2 	bl	8000854 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001672:	e00d      	b.n	8001690 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff f8ee 	bl	8000854 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d906      	bls.n	8001690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1d2      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001690:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ea      	bne.n	8001674 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80a6 	beq.w	80017f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016b0:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2b4>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x2b6>
 80016c0:	2300      	movs	r3, #0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00d      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b7f      	ldr	r3, [pc, #508]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	4a7e      	ldr	r2, [pc, #504]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6593      	str	r3, [r2, #88]	; 0x58
 80016d2:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016de:	2301      	movs	r3, #1
 80016e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e2:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <HAL_RCC_OscConfig+0x4bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ee:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x4bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a75      	ldr	r2, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x4bc>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fa:	f7ff f8ab 	bl	8000854 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001702:	f7ff f8a7 	bl	8000854 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e18b      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001714:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <HAL_RCC_OscConfig+0x4bc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_RCC_OscConfig+0x32e>
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	4a65      	ldr	r2, [pc, #404]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001738:	e024      	b.n	8001784 <HAL_RCC_OscConfig+0x378>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d110      	bne.n	8001764 <HAL_RCC_OscConfig+0x358>
 8001742:	4b60      	ldr	r3, [pc, #384]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	4a5a      	ldr	r2, [pc, #360]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001762:	e00f      	b.n	8001784 <HAL_RCC_OscConfig+0x378>
 8001764:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176a:	4a56      	ldr	r2, [pc, #344]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d016      	beq.n	80017ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff f862 	bl	8000854 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff f85e 	bl	8000854 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e140      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ed      	beq.n	8001794 <HAL_RCC_OscConfig+0x388>
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff f84b 	bl	8000854 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff f847 	bl	8000854 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e129      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ed      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03c      	beq.n	800187e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01c      	beq.n	8001846 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001812:	4a2c      	ldr	r2, [pc, #176]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f81a 	bl	8000854 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001824:	f7ff f816 	bl	8000854 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0fa      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ef      	beq.n	8001824 <HAL_RCC_OscConfig+0x418>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7fe fffd 	bl	8000854 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185e:	f7fe fff9 	bl	8000854 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0dd      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 8001872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80d1 	beq.w	8001a2a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b0c      	cmp	r3, #12
 8001892:	f000 808b 	beq.w	80019ac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d15e      	bne.n	800195c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_RCC_OscConfig+0x4b8>)
 80018a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7fe ffd3 	bl	8000854 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b0:	e00c      	b.n	80018cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b2:	f7fe ffcf 	bl	8000854 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d905      	bls.n	80018cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0b3      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018cc:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ec      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCC_OscConfig+0x62c>)
 80018de:	4013      	ands	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6a11      	ldr	r1, [r2, #32]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e8:	3a01      	subs	r2, #1
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018f2:	0212      	lsls	r2, r2, #8
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018fa:	0852      	lsrs	r2, r2, #1
 80018fc:	3a01      	subs	r2, #1
 80018fe:	0552      	lsls	r2, r2, #21
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001906:	0852      	lsrs	r2, r2, #1
 8001908:	3a01      	subs	r2, #1
 800190a:	0652      	lsls	r2, r2, #25
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001912:	06d2      	lsls	r2, r2, #27
 8001914:	430a      	orrs	r2, r1
 8001916:	4947      	ldr	r1, [pc, #284]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 8001918:	4313      	orrs	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a44      	ldr	r2, [pc, #272]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a41      	ldr	r2, [pc, #260]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7fe ff8e 	bl	8000854 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7fe ff8a 	bl	8000854 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e06e      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x530>
 800195a:	e066      	b.n	8001a2a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a34      	ldr	r2, [pc, #208]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 8001962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a2e      	ldr	r2, [pc, #184]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 800197a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7fe ff66 	bl	8000854 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7fe ff62 	bl	8000854 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e046      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199e:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x580>
 80019aa:	e03e      	b.n	8001a2a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e039      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_OscConfig+0x628>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d12c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	3b01      	subs	r3, #1
 80019d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d123      	bne.n	8001a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d11b      	bne.n	8001a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d113      	bne.n	8001a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	019f800c 	.word	0x019f800c

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e11e      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b91      	ldr	r3, [pc, #580]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 020f 	bic.w	r2, r3, #15
 8001a6a:	498c      	ldr	r1, [pc, #560]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b8a      	ldr	r3, [pc, #552]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e106      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d073      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d129      	bne.n	8001aec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a98:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0f4      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001aa8:	f000 f966 	bl	8001d78 <RCC_GetSysClockFreqFromPLLSource>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4a7c      	ldr	r2, [pc, #496]	; (8001ca4 <HAL_RCC_ClockConfig+0x268>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d93f      	bls.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d033      	beq.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12f      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ad6:	4b72      	ldr	r3, [pc, #456]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ade:	4a70      	ldr	r2, [pc, #448]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e024      	b.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0c6      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0be      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b14:	f000 f8ce 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4a61      	ldr	r2, [pc, #388]	; (8001ca4 <HAL_RCC_ClockConfig+0x268>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d909      	bls.n	8001b36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4957      	ldr	r1, [pc, #348]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7fe fe84 	bl	8000854 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7fe fe80 	bl	8000854 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e095      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b4e      	ldr	r3, [pc, #312]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a42      	ldr	r2, [pc, #264]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4936      	ldr	r1, [pc, #216]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
 8001bca:	e008      	b.n	8001bde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b80      	cmp	r3, #128	; 0x80
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bd2:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d21d      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 020f 	bic.w	r2, r3, #15
 8001bf4:	4929      	ldr	r1, [pc, #164]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bfc:	f7fe fe2a 	bl	8000854 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7fe fe26 	bl	8000854 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e03b      	b.n	8001c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1ed      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4917      	ldr	r1, [pc, #92]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490f      	ldr	r1, [pc, #60]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c66:	f000 f825 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <HAL_RCC_ClockConfig+0x26c>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x270>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x274>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fd96 	bl	80007bc <HAL_InitTick>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	04c4b400 	.word	0x04c4b400
 8001ca8:	08003390 	.word	0x08003390
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e047      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e03e      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d136      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d08:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d12:	68d2      	ldr	r2, [r2, #12]
 8001d14:	0a12      	lsrs	r2, r2, #8
 8001d16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e00c      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2c:	68d2      	ldr	r2, [r2, #12]
 8001d2e:	0a12      	lsrs	r2, r2, #8
 8001d30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0e5b      	lsrs	r3, r3, #25
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e001      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d5c:	693b      	ldr	r3, [r7, #16]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	016e3600 	.word	0x016e3600

08001d78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d10c      	bne.n	8001db6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001da6:	68d2      	ldr	r2, [r2, #12]
 8001da8:	0a12      	lsrs	r2, r2, #8
 8001daa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
    break;
 8001db4:	e00c      	b.n	8001dd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dc0:	68d2      	ldr	r2, [r2, #12]
 8001dc2:	0a12      	lsrs	r2, r2, #8
 8001dc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    break;
 8001dce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0e5b      	lsrs	r3, r3, #25
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dea:	687b      	ldr	r3, [r7, #4]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	016e3600 	.word	0x016e3600
 8001e00:	00f42400 	.word	0x00f42400

08001e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e049      	b.n	8001eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fbb6 	bl	800059c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 fda2 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e049      	b.n	8001f58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d106      	bne.n	8001ede <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f841 	bl	8001f60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f000 fd4b 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e03c      	b.n	800201a <HAL_TIM_PWM_Start_DMA+0xa6>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d109      	bne.n	8001fba <HAL_TIM_PWM_Start_DMA+0x46>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e02f      	b.n	800201a <HAL_TIM_PWM_Start_DMA+0xa6>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d109      	bne.n	8001fd4 <HAL_TIM_PWM_Start_DMA+0x60>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e022      	b.n	800201a <HAL_TIM_PWM_Start_DMA+0xa6>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d109      	bne.n	8001fee <HAL_TIM_PWM_Start_DMA+0x7a>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	e015      	b.n	800201a <HAL_TIM_PWM_Start_DMA+0xa6>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d109      	bne.n	8002008 <HAL_TIM_PWM_Start_DMA+0x94>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e008      	b.n	800201a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
 8002020:	e1a6      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e03c      	b.n	80020b6 <HAL_TIM_PWM_Start_DMA+0x142>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d109      	bne.n	8002056 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	e02f      	b.n	80020b6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d109      	bne.n	8002070 <HAL_TIM_PWM_Start_DMA+0xfc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e022      	b.n	80020b6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d109      	bne.n	800208a <HAL_TIM_PWM_Start_DMA+0x116>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	bf0c      	ite	eq
 8002082:	2301      	moveq	r3, #1
 8002084:	2300      	movne	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	e015      	b.n	80020b6 <HAL_TIM_PWM_Start_DMA+0x142>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d109      	bne.n	80020a4 <HAL_TIM_PWM_Start_DMA+0x130>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e008      	b.n	80020b6 <HAL_TIM_PWM_Start_DMA+0x142>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d034      	beq.n	8002124 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d104      	bne.n	80020ca <HAL_TIM_PWM_Start_DMA+0x156>
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e152      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d104      	bne.n	80020da <HAL_TIM_PWM_Start_DMA+0x166>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	e026      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d104      	bne.n	80020ea <HAL_TIM_PWM_Start_DMA+0x176>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e8:	e01e      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d104      	bne.n	80020fa <HAL_TIM_PWM_Start_DMA+0x186>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f8:	e016      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d104      	bne.n	800210a <HAL_TIM_PWM_Start_DMA+0x196>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002108:	e00e      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d104      	bne.n	800211a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002118:	e006      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002122:	e001      	b.n	8002128 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e123      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	f200 80ae 	bhi.w	800228c <HAL_TIM_PWM_Start_DMA+0x318>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	0800216d 	.word	0x0800216d
 800213c:	0800228d 	.word	0x0800228d
 8002140:	0800228d 	.word	0x0800228d
 8002144:	0800228d 	.word	0x0800228d
 8002148:	080021b5 	.word	0x080021b5
 800214c:	0800228d 	.word	0x0800228d
 8002150:	0800228d 	.word	0x0800228d
 8002154:	0800228d 	.word	0x0800228d
 8002158:	080021fd 	.word	0x080021fd
 800215c:	0800228d 	.word	0x0800228d
 8002160:	0800228d 	.word	0x0800228d
 8002164:	0800228d 	.word	0x0800228d
 8002168:	08002245 	.word	0x08002245
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	4a81      	ldr	r2, [pc, #516]	; (8002378 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	4a80      	ldr	r2, [pc, #512]	; (800237c <HAL_TIM_PWM_Start_DMA+0x408>)
 800217a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	4a7f      	ldr	r2, [pc, #508]	; (8002380 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002182:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3334      	adds	r3, #52	; 0x34
 8002190:	461a      	mov	r2, r3
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	f7fe fd22 	bl	8000bdc <HAL_DMA_Start_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0e6      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b0:	60da      	str	r2, [r3, #12]
      break;
 80021b2:	e06e      	b.n	8002292 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	4a6f      	ldr	r2, [pc, #444]	; (8002378 <HAL_TIM_PWM_Start_DMA+0x404>)
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	4a6e      	ldr	r2, [pc, #440]	; (800237c <HAL_TIM_PWM_Start_DMA+0x408>)
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	4a6d      	ldr	r2, [pc, #436]	; (8002380 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3338      	adds	r3, #56	; 0x38
 80021d8:	461a      	mov	r2, r3
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	f7fe fcfe 	bl	8000bdc <HAL_DMA_Start_IT>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0c2      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f8:	60da      	str	r2, [r3, #12]
      break;
 80021fa:	e04a      	b.n	8002292 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <HAL_TIM_PWM_Start_DMA+0x404>)
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	4a5c      	ldr	r2, [pc, #368]	; (800237c <HAL_TIM_PWM_Start_DMA+0x408>)
 800220a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002212:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	333c      	adds	r3, #60	; 0x3c
 8002220:	461a      	mov	r2, r3
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	f7fe fcda 	bl	8000bdc <HAL_DMA_Start_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e09e      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002240:	60da      	str	r2, [r3, #12]
      break;
 8002242:	e026      	b.n	8002292 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a4b      	ldr	r2, [pc, #300]	; (8002378 <HAL_TIM_PWM_Start_DMA+0x404>)
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	4a4a      	ldr	r2, [pc, #296]	; (800237c <HAL_TIM_PWM_Start_DMA+0x408>)
 8002252:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a49      	ldr	r2, [pc, #292]	; (8002380 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800225a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3340      	adds	r3, #64	; 0x40
 8002268:	461a      	mov	r2, r3
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	f7fe fcb6 	bl	8000bdc <HAL_DMA_Start_IT>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07a      	b.n	8002370 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002288:	60da      	str	r2, [r3, #12]
      break;
 800228a:	e002      	b.n	8002292 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	75fb      	strb	r3, [r7, #23]
      break;
 8002290:	bf00      	nop
  }

  if (status == HAL_OK)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d16a      	bne.n	800236e <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 ff95 	bl	80031d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a36      	ldr	r2, [pc, #216]	; (8002384 <HAL_TIM_PWM_Start_DMA+0x410>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a34      	ldr	r2, [pc, #208]	; (8002388 <HAL_TIM_PWM_Start_DMA+0x414>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00e      	beq.n	80022d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a33      	ldr	r2, [pc, #204]	; (800238c <HAL_TIM_PWM_Start_DMA+0x418>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a31      	ldr	r2, [pc, #196]	; (8002390 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_TIM_PWM_Start_DMA+0x364>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a30      	ldr	r2, [pc, #192]	; (8002394 <HAL_TIM_PWM_Start_DMA+0x420>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_PWM_Start_DMA+0x368>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_TIM_PWM_Start_DMA+0x36a>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_TIM_PWM_Start_DMA+0x410>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d018      	beq.n	800232e <HAL_TIM_PWM_Start_DMA+0x3ba>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d013      	beq.n	800232e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <HAL_TIM_PWM_Start_DMA+0x424>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00e      	beq.n	800232e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a21      	ldr	r2, [pc, #132]	; (800239c <HAL_TIM_PWM_Start_DMA+0x428>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d009      	beq.n	800232e <HAL_TIM_PWM_Start_DMA+0x3ba>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_TIM_PWM_Start_DMA+0x414>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d004      	beq.n	800232e <HAL_TIM_PWM_Start_DMA+0x3ba>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_TIM_PWM_Start_DMA+0x418>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d115      	bne.n	800235a <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d015      	beq.n	800236c <HAL_TIM_PWM_Start_DMA+0x3f8>
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002346:	d011      	beq.n	800236c <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002358:	e008      	b.n	800236c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e000      	b.n	800236e <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	0800287b 	.word	0x0800287b
 800237c:	08002923 	.word	0x08002923
 8002380:	080027e9 	.word	0x080027e9
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40013400 	.word	0x40013400
 800238c:	40014000 	.word	0x40014000
 8002390:	40014400 	.word	0x40014400
 8002394:	40014800 	.word	0x40014800
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800
 80023a0:	00010007 	.word	0x00010007

080023a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023be:	2302      	movs	r3, #2
 80023c0:	e0ff      	b.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b14      	cmp	r3, #20
 80023ce:	f200 80f0 	bhi.w	80025b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	0800242d 	.word	0x0800242d
 80023dc:	080025b3 	.word	0x080025b3
 80023e0:	080025b3 	.word	0x080025b3
 80023e4:	080025b3 	.word	0x080025b3
 80023e8:	0800246d 	.word	0x0800246d
 80023ec:	080025b3 	.word	0x080025b3
 80023f0:	080025b3 	.word	0x080025b3
 80023f4:	080025b3 	.word	0x080025b3
 80023f8:	080024af 	.word	0x080024af
 80023fc:	080025b3 	.word	0x080025b3
 8002400:	080025b3 	.word	0x080025b3
 8002404:	080025b3 	.word	0x080025b3
 8002408:	080024ef 	.word	0x080024ef
 800240c:	080025b3 	.word	0x080025b3
 8002410:	080025b3 	.word	0x080025b3
 8002414:	080025b3 	.word	0x080025b3
 8002418:	08002531 	.word	0x08002531
 800241c:	080025b3 	.word	0x080025b3
 8002420:	080025b3 	.word	0x080025b3
 8002424:	080025b3 	.word	0x080025b3
 8002428:	08002571 	.word	0x08002571
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fb3a 	bl	8002aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0208 	orr.w	r2, r2, #8
 8002446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0204 	bic.w	r2, r2, #4
 8002456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6999      	ldr	r1, [r3, #24]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	619a      	str	r2, [r3, #24]
      break;
 800246a:	e0a5      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fbaa 	bl	8002bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6999      	ldr	r1, [r3, #24]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	021a      	lsls	r2, r3, #8
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	619a      	str	r2, [r3, #24]
      break;
 80024ac:	e084      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fc13 	bl	8002ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0208 	orr.w	r2, r2, #8
 80024c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0204 	bic.w	r2, r2, #4
 80024d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69d9      	ldr	r1, [r3, #28]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	61da      	str	r2, [r3, #28]
      break;
 80024ec:	e064      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fc7b 	bl	8002df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69da      	ldr	r2, [r3, #28]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69d9      	ldr	r1, [r3, #28]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	61da      	str	r2, [r3, #28]
      break;
 800252e:	e043      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fce4 	bl	8002f04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0208 	orr.w	r2, r2, #8
 800254a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0204 	bic.w	r2, r2, #4
 800255a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800256e:	e023      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fd28 	bl	8002fcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	021a      	lsls	r2, r3, #8
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
      break;
 80025b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop

080025cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_ConfigClockSource+0x1c>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e0de      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x1da>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800260a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a63      	ldr	r2, [pc, #396]	; (80027b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f000 80a9 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 8002628:	4a61      	ldr	r2, [pc, #388]	; (80027b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f200 80ae 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 8002630:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	f000 80a1 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 8002638:	4a5e      	ldr	r2, [pc, #376]	; (80027b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f200 80a6 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 8002640:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f000 8099 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 8002648:	4a5b      	ldr	r2, [pc, #364]	; (80027b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800264a:	4293      	cmp	r3, r2
 800264c:	f200 809e 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 8002650:	4a5a      	ldr	r2, [pc, #360]	; (80027bc <HAL_TIM_ConfigClockSource+0x1f0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	f000 8091 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_TIM_ConfigClockSource+0x1f0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	f200 8096 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 8002660:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002664:	f000 8089 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 8002668:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800266c:	f200 808e 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002674:	d03e      	beq.n	80026f4 <HAL_TIM_ConfigClockSource+0x128>
 8002676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267a:	f200 8087 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	f000 8086 	beq.w	8002792 <HAL_TIM_ConfigClockSource+0x1c6>
 8002686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268a:	d87f      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 800268c:	2b70      	cmp	r3, #112	; 0x70
 800268e:	d01a      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0xfa>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d87b      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 8002694:	2b60      	cmp	r3, #96	; 0x60
 8002696:	d050      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x16e>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d877      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 800269c:	2b50      	cmp	r3, #80	; 0x50
 800269e:	d03c      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x14e>
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d873      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d058      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x18e>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d86f      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 80026ac:	2b30      	cmp	r3, #48	; 0x30
 80026ae:	d064      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 80026b0:	2b30      	cmp	r3, #48	; 0x30
 80026b2:	d86b      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d060      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d867      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05c      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d05a      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x1ae>
 80026c4:	e062      	b.n	800278c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f000 fd5b 	bl	8003190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	609a      	str	r2, [r3, #8]
      break;
 80026f2:	e04f      	b.n	8002794 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6899      	ldr	r1, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f000 fd44 	bl	8003190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002716:	609a      	str	r2, [r3, #8]
      break;
 8002718:	e03c      	b.n	8002794 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 fcb6 	bl	8003098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2150      	movs	r1, #80	; 0x50
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fd0f 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002738:	e02c      	b.n	8002794 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 fcd5 	bl	80030f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2160      	movs	r1, #96	; 0x60
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fcff 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002758:	e01c      	b.n	8002794 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f000 fc96 	bl	8003098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fcef 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 8002778:	e00c      	b.n	8002794 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f000 fce6 	bl	8003156 <TIM_ITRx_SetConfig>
      break;
 800278a:	e003      	b.n	8002794 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e000      	b.n	8002794 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	00100070 	.word	0x00100070
 80027b4:	00100040 	.word	0x00100040
 80027b8:	00100030 	.word	0x00100030
 80027bc:	00100020 	.word	0x00100020

080027c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d107      	bne.n	8002810 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280e:	e02a      	b.n	8002866 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d107      	bne.n	800282a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2202      	movs	r2, #2
 800281e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002828:	e01d      	b.n	8002866 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2204      	movs	r2, #4
 8002838:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002842:	e010      	b.n	8002866 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d107      	bne.n	800285e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2208      	movs	r2, #8
 8002852:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800285c:	e003      	b.n	8002866 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff ffb4 	bl	80027d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	771a      	strb	r2, [r3, #28]
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	d10b      	bne.n	80028aa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d136      	bne.n	800290e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	e031      	b.n	800290e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d10b      	bne.n	80028cc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2202      	movs	r2, #2
 80028b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d125      	bne.n	800290e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ca:	e020      	b.n	800290e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10b      	bne.n	80028ee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2204      	movs	r2, #4
 80028da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d114      	bne.n	800290e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ec:	e00f      	b.n	800290e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d10a      	bne.n	800290e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2208      	movs	r2, #8
 80028fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7fd fc92 	bl	8000238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	771a      	strb	r2, [r3, #28]
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d103      	bne.n	8002942 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	771a      	strb	r2, [r3, #28]
 8002940:	e019      	b.n	8002976 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d103      	bne.n	8002954 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2202      	movs	r2, #2
 8002950:	771a      	strb	r2, [r3, #28]
 8002952:	e010      	b.n	8002976 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d103      	bne.n	8002966 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2204      	movs	r2, #4
 8002962:	771a      	strb	r2, [r3, #28]
 8002964:	e007      	b.n	8002976 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d102      	bne.n	8002976 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2208      	movs	r2, #8
 8002974:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ff22 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	771a      	strb	r2, [r3, #28]
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <TIM_Base_SetConfig+0x104>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00f      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <TIM_Base_SetConfig+0x108>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <TIM_Base_SetConfig+0x10c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x38>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <TIM_Base_SetConfig+0x110>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <TIM_Base_SetConfig+0x104>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01b      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d017      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <TIM_Base_SetConfig+0x108>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <TIM_Base_SetConfig+0x10c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00f      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <TIM_Base_SetConfig+0x110>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a27      	ldr	r2, [pc, #156]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_Base_SetConfig+0x8a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <TIM_Base_SetConfig+0x104>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00f      	beq.n	8002a74 <TIM_Base_SetConfig+0xe8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <TIM_Base_SetConfig+0x110>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <TIM_Base_SetConfig+0xe8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <TIM_Base_SetConfig+0x114>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_Base_SetConfig+0xe8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0xe8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <TIM_Base_SetConfig+0x11c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	40013400 	.word	0x40013400
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800

08002aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f023 0201 	bic.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f023 0302 	bic.w	r3, r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a2c      	ldr	r2, [pc, #176]	; (8002bb8 <TIM_OC1_SetConfig+0x10c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00f      	beq.n	8002b2c <TIM_OC1_SetConfig+0x80>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <TIM_OC1_SetConfig+0x110>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00b      	beq.n	8002b2c <TIM_OC1_SetConfig+0x80>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <TIM_OC1_SetConfig+0x114>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <TIM_OC1_SetConfig+0x80>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <TIM_OC1_SetConfig+0x118>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_OC1_SetConfig+0x80>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <TIM_OC1_SetConfig+0x11c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10c      	bne.n	8002b46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0308 	bic.w	r3, r3, #8
 8002b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <TIM_OC1_SetConfig+0x10c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_OC1_SetConfig+0xc2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <TIM_OC1_SetConfig+0x110>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_OC1_SetConfig+0xc2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <TIM_OC1_SetConfig+0x114>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_OC1_SetConfig+0xc2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <TIM_OC1_SetConfig+0x118>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_OC1_SetConfig+0xc2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <TIM_OC1_SetConfig+0x11c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	621a      	str	r2, [r3, #32]
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40013400 	.word	0x40013400
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40014800 	.word	0x40014800

08002bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0210 	bic.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0320 	bic.w	r3, r3, #32
 8002c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <TIM_OC2_SetConfig+0x100>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_OC2_SetConfig+0x6c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <TIM_OC2_SetConfig+0x104>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10d      	bne.n	8002c54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <TIM_OC2_SetConfig+0x100>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00f      	beq.n	8002c7c <TIM_OC2_SetConfig+0xb0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <TIM_OC2_SetConfig+0x104>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <TIM_OC2_SetConfig+0xb0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <TIM_OC2_SetConfig+0x108>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <TIM_OC2_SetConfig+0xb0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <TIM_OC2_SetConfig+0x10c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <TIM_OC2_SetConfig+0xb0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <TIM_OC2_SetConfig+0x110>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d113      	bne.n	8002ca4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40013400 	.word	0x40013400
 8002cd4:	40014000 	.word	0x40014000
 8002cd8:	40014400 	.word	0x40014400
 8002cdc:	40014800 	.word	0x40014800

08002ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <TIM_OC3_SetConfig+0xfc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_OC3_SetConfig+0x6a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a26      	ldr	r2, [pc, #152]	; (8002de0 <TIM_OC3_SetConfig+0x100>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10d      	bne.n	8002d66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <TIM_OC3_SetConfig+0xfc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00f      	beq.n	8002d8e <TIM_OC3_SetConfig+0xae>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <TIM_OC3_SetConfig+0x100>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00b      	beq.n	8002d8e <TIM_OC3_SetConfig+0xae>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <TIM_OC3_SetConfig+0x104>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <TIM_OC3_SetConfig+0xae>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <TIM_OC3_SetConfig+0x108>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <TIM_OC3_SetConfig+0xae>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <TIM_OC3_SetConfig+0x10c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d113      	bne.n	8002db6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	621a      	str	r2, [r3, #32]
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40013400 	.word	0x40013400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800

08002df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	031b      	lsls	r3, r3, #12
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <TIM_OC4_SetConfig+0x100>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_OC4_SetConfig+0x6c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <TIM_OC4_SetConfig+0x104>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10d      	bne.n	8002e78 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	031b      	lsls	r3, r3, #12
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <TIM_OC4_SetConfig+0x100>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00f      	beq.n	8002ea0 <TIM_OC4_SetConfig+0xb0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <TIM_OC4_SetConfig+0x104>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <TIM_OC4_SetConfig+0xb0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <TIM_OC4_SetConfig+0x108>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_OC4_SetConfig+0xb0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a1a      	ldr	r2, [pc, #104]	; (8002efc <TIM_OC4_SetConfig+0x10c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC4_SetConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <TIM_OC4_SetConfig+0x110>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d113      	bne.n	8002ec8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002eae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	019b      	lsls	r3, r3, #6
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	621a      	str	r2, [r3, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40013400 	.word	0x40013400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800

08002f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <TIM_OC5_SetConfig+0xb4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00f      	beq.n	8002f7e <TIM_OC5_SetConfig+0x7a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a16      	ldr	r2, [pc, #88]	; (8002fbc <TIM_OC5_SetConfig+0xb8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00b      	beq.n	8002f7e <TIM_OC5_SetConfig+0x7a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <TIM_OC5_SetConfig+0xbc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <TIM_OC5_SetConfig+0x7a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <TIM_OC5_SetConfig+0xc0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_OC5_SetConfig+0x7a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <TIM_OC5_SetConfig+0xc4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d109      	bne.n	8002f92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	621a      	str	r2, [r3, #32]
}
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40013400 	.word	0x40013400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800

08002fcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a18      	ldr	r2, [pc, #96]	; (8003084 <TIM_OC6_SetConfig+0xb8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00f      	beq.n	8003048 <TIM_OC6_SetConfig+0x7c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <TIM_OC6_SetConfig+0xbc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_OC6_SetConfig+0x7c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <TIM_OC6_SetConfig+0xc0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_OC6_SetConfig+0x7c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a15      	ldr	r2, [pc, #84]	; (8003090 <TIM_OC6_SetConfig+0xc4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_OC6_SetConfig+0x7c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a14      	ldr	r2, [pc, #80]	; (8003094 <TIM_OC6_SetConfig+0xc8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d109      	bne.n	800305c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	029b      	lsls	r3, r3, #10
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40013400 	.word	0x40013400
 800308c:	40014000 	.word	0x40014000
 8003090:	40014400 	.word	0x40014400
 8003094:	40014800 	.word	0x40014800

08003098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f023 030a 	bic.w	r3, r3, #10
 80030d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b087      	sub	sp, #28
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f023 0210 	bic.w	r2, r3, #16
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	031b      	lsls	r3, r3, #12
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	f043 0307 	orr.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	021a      	lsls	r2, r3, #8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2201      	movs	r2, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1a      	ldr	r2, [r3, #32]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003230:	2302      	movs	r3, #2
 8003232:	e065      	b.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2c      	ldr	r2, [pc, #176]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800326e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003284:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d018      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d013      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a17      	ldr	r2, [pc, #92]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a12      	ldr	r2, [pc, #72]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a13      	ldr	r2, [pc, #76]	; (800331c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10c      	bne.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40013400 	.word	0x40013400
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40014000 	.word	0x40014000

08003320 <__libc_init_array>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4d0d      	ldr	r5, [pc, #52]	; (8003358 <__libc_init_array+0x38>)
 8003324:	4c0d      	ldr	r4, [pc, #52]	; (800335c <__libc_init_array+0x3c>)
 8003326:	1b64      	subs	r4, r4, r5
 8003328:	10a4      	asrs	r4, r4, #2
 800332a:	2600      	movs	r6, #0
 800332c:	42a6      	cmp	r6, r4
 800332e:	d109      	bne.n	8003344 <__libc_init_array+0x24>
 8003330:	4d0b      	ldr	r5, [pc, #44]	; (8003360 <__libc_init_array+0x40>)
 8003332:	4c0c      	ldr	r4, [pc, #48]	; (8003364 <__libc_init_array+0x44>)
 8003334:	f000 f820 	bl	8003378 <_init>
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	2600      	movs	r6, #0
 800333e:	42a6      	cmp	r6, r4
 8003340:	d105      	bne.n	800334e <__libc_init_array+0x2e>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	f855 3b04 	ldr.w	r3, [r5], #4
 8003348:	4798      	blx	r3
 800334a:	3601      	adds	r6, #1
 800334c:	e7ee      	b.n	800332c <__libc_init_array+0xc>
 800334e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003352:	4798      	blx	r3
 8003354:	3601      	adds	r6, #1
 8003356:	e7f2      	b.n	800333e <__libc_init_array+0x1e>
 8003358:	080033a0 	.word	0x080033a0
 800335c:	080033a0 	.word	0x080033a0
 8003360:	080033a0 	.word	0x080033a0
 8003364:	080033a4 	.word	0x080033a4

08003368 <memset>:
 8003368:	4402      	add	r2, r0
 800336a:	4603      	mov	r3, r0
 800336c:	4293      	cmp	r3, r2
 800336e:	d100      	bne.n	8003372 <memset+0xa>
 8003370:	4770      	bx	lr
 8003372:	f803 1b01 	strb.w	r1, [r3], #1
 8003376:	e7f9      	b.n	800336c <memset+0x4>

08003378 <_init>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	bf00      	nop
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr

08003384 <_fini>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	bf00      	nop
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr
